import pandas as pd
import matplotlib.pyplot as plt

def preprocess_trend_data(trend_series):
    # Replace '<1' with 0
    trend_series_numeric = trend_series.replace('<1', 0)
    # Convert to numeric values
    trend_series_numeric = pd.to_numeric(trend_series_numeric, errors='coerce').fillna(0)
    return trend_series_numeric

token_names = ['bitcoin', 'ethereum', 'BNB', 'solana', 'XRP', 'dogecoin', 'cardano', 'polkadot', 'chainlink', 'litecoin', 'uniswap',
               'filecoin', 'fetch.ai', 'monero', 'singularitynet', 'tezos', 'kucoin', 'pancakeswap', 'oasis network', 'ocean protocol']

monthly_data = pd.read_csv('Google Trends Data Challenge Datasets/additional_datasets/crypto_searches.csv', skiprows=1)

monthly_data['Month'] = pd.to_datetime(monthly_data['Month'], format='%Y-%m')

merged_data = pd.DataFrame()

for token in token_names:
    weekly_data = pd.read_csv(f'Google Trends Data Challenge Datasets/trends/{token}.csv', skiprows=1)
    
    weekly_data['Week'] = pd.to_datetime(weekly_data['Week'])
    
    weekly_data[f'{token}: (Worldwide)'] = preprocess_trend_data(weekly_data[f'{token}: (Worldwide)'])
    
    monthly_data_interpolated = monthly_data.set_index('Month').resample('W').ffill()
    
    merged_token_data = pd.merge(monthly_data_interpolated, weekly_data, left_index=True, right_on='Week')
    
    merged_data = pd.concat([merged_data, merged_token_data], ignore_index=True)
    #print(merged_data)

token_correlations = {}

for token in token_names:
    correlation = merged_data['crypto: (Worlwide)'].corr(merged_data[f'{token}: (Worldwide)'])
    
    token_correlations[token] = correlation

print(token_correlations)

sorted_tokens = sorted(token_correlations, key=token_correlations.get, reverse=True)
sorted_correlations = [token_correlations[token] for token in sorted_tokens]

plt.figure(figsize=(10, 6))
plt.bar(sorted_tokens, sorted_correlations, color='skyblue')
plt.title('Ranked Correlation between Monthly Crypto and Weekly Token Trends')
plt.xlabel('Token')
plt.ylabel('Correlation')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()